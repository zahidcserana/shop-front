import * as tslib_1 from "tslib";
import { Component, Input } from "@angular/core";
import { KeyboardShortcutsService } from "./ng-keyboard-shortcuts.service";
/**
 * A component to bind global shortcuts, can be used multiple times across the app
 * will remove registered shortcuts when element is removed from DOM.
 */
var KeyboardShortcutsComponent = /** @class */ (function () {
    /**
     * @ignore
     * @param {KeyboardShortcutsService} keyboard
     */
    function KeyboardShortcutsComponent(keyboard) {
        this.keyboard = keyboard;
        /**
         * A list of shortcuts.
         */
        this.shortcuts = [];
        /**
         * @ignore
         * list of registered keyboard shortcuts
         * used for clean up on NgDestroy.
         */
        this.clearIds = [];
        /**
         * @ignore
         */
        this._disabled = false;
    }
    Object.defineProperty(KeyboardShortcutsComponent.prototype, "disabled", {
        /**
         * Disable all shortcuts for this component.
         */
        set: function (value) {
            this._disabled = value;
            if (this.clearIds) {
                this.keyboard.remove(this.clearIds);
                this.clearIds = [];
            }
            if (value) {
                return;
            }
            this.clearIds = this.keyboard.add(this.shortcuts);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @ignore
     */
    KeyboardShortcutsComponent.prototype.ngOnInit = function () { };
    /**
     * Select a key to listen to, will emit when the selected key is pressed.
     */
    KeyboardShortcutsComponent.prototype.select = function (key) {
        return this.keyboard.select(key);
    };
    /**
     * @ignore
     */
    KeyboardShortcutsComponent.prototype.ngAfterViewInit = function () { };
    /**
     * @ignore
     */
    KeyboardShortcutsComponent.prototype.ngOnChanges = function (changes) {
        var _this = this;
        if (!changes.shortcuts || !changes.shortcuts.currentValue) {
            return;
        }
        if (this.clearIds) {
            this.keyboard.remove(this.clearIds);
        }
        setTimeout(function () { return _this.clearIds = _this.keyboard.add(changes.shortcuts.currentValue); });
    };
    /**
     * @ignore
     */
    KeyboardShortcutsComponent.prototype.ngOnDestroy = function () {
        this.keyboard.remove(this.clearIds);
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], KeyboardShortcutsComponent.prototype, "shortcuts", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], KeyboardShortcutsComponent.prototype, "disabled", null);
    KeyboardShortcutsComponent = tslib_1.__decorate([
        Component({
            selector: "ng-keyboard-shortcuts",
            template: ""
        }),
        tslib_1.__metadata("design:paramtypes", [KeyboardShortcutsService])
    ], KeyboardShortcutsComponent);
    return KeyboardShortcutsComponent;
}());
export { KeyboardShortcutsComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmcta2V5Ym9hcmQtc2hvcnRjdXRzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWtleWJvYXJkLXNob3J0Y3V0cy8iLCJzb3VyY2VzIjpbImxpYi9uZy1rZXlib2FyZC1zaG9ydGN1dHMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBRUgsU0FBUyxFQUNULEtBQUssRUFLUixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUkzRTs7O0dBR0c7QUFLSDtJQWdDSTs7O09BR0c7SUFDSCxvQ0FBb0IsUUFBa0M7UUFBbEMsYUFBUSxHQUFSLFFBQVEsQ0FBMEI7UUFuQ3REOztXQUVHO1FBQ00sY0FBUyxHQUFvQyxFQUFFLENBQUM7UUFFekQ7Ozs7V0FJRztRQUNLLGFBQVEsR0FBYSxFQUFFLENBQUM7UUFFaEM7O1dBRUc7UUFDSyxjQUFTLEdBQUcsS0FBSyxDQUFDO0lBb0IrQixDQUFDO0lBaEJqRCxzQkFBSSxnREFBUTtRQUhyQjs7V0FFRzthQUNNLFVBQWEsS0FBSztZQUN2QixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztZQUN2QixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUNwQyxJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQzthQUN0QjtZQUNELElBQUksS0FBSyxFQUFFO2dCQUNQLE9BQU87YUFDVjtZQUNELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3RELENBQUM7OztPQUFBO0lBUUQ7O09BRUc7SUFDSCw2Q0FBUSxHQUFSLGNBQVksQ0FBQztJQUViOztPQUVHO0lBQ0ksMkNBQU0sR0FBYixVQUFjLEdBQVc7UUFDckIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxvREFBZSxHQUFmLGNBQXlCLENBQUM7SUFFMUI7O09BRUc7SUFDSCxnREFBVyxHQUFYLFVBQVksT0FBc0I7UUFBbEMsaUJBUUM7UUFQRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFO1lBQ3ZELE9BQU87U0FDVjtRQUNELElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNmLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUN2QztRQUNELFVBQVUsQ0FBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLFFBQVEsR0FBRyxLQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxFQUFqRSxDQUFpRSxDQUFDLENBQUM7SUFDeEYsQ0FBQztJQUVEOztPQUVHO0lBQ0gsZ0RBQVcsR0FBWDtRQUNJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBckVRO1FBQVIsS0FBSyxFQUFFOztpRUFBaUQ7SUFnQmhEO1FBQVIsS0FBSyxFQUFFOzs7OERBVVA7SUE5QlEsMEJBQTBCO1FBSnRDLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSx1QkFBdUI7WUFDakMsUUFBUSxFQUFFLEVBQUU7U0FDZixDQUFDO2lEQXFDZ0Msd0JBQXdCO09BcEM3QywwQkFBMEIsQ0EwRXRDO0lBQUQsaUNBQUM7Q0FBQSxBQTFFRCxJQTBFQztTQTFFWSwwQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIEFmdGVyVmlld0luaXQsXG4gICAgQ29tcG9uZW50LFxuICAgIElucHV0LFxuICAgIE9uQ2hhbmdlcyxcbiAgICBPbkRlc3Ryb3ksXG4gICAgT25Jbml0LFxuICAgIFNpbXBsZUNoYW5nZXNcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEtleWJvYXJkU2hvcnRjdXRzU2VydmljZSB9IGZyb20gXCIuL25nLWtleWJvYXJkLXNob3J0Y3V0cy5zZXJ2aWNlXCI7XG5pbXBvcnQgeyBTaG9ydGN1dElucHV0LCBTaG9ydGN1dEV2ZW50T3V0cHV0IH0gZnJvbSBcIi4vbmcta2V5Ym9hcmQtc2hvcnRjdXRzLmludGVyZmFjZXNcIjtcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwicnhqc1wiO1xuXG4vKipcbiAqIEEgY29tcG9uZW50IHRvIGJpbmQgZ2xvYmFsIHNob3J0Y3V0cywgY2FuIGJlIHVzZWQgbXVsdGlwbGUgdGltZXMgYWNyb3NzIHRoZSBhcHBcbiAqIHdpbGwgcmVtb3ZlIHJlZ2lzdGVyZWQgc2hvcnRjdXRzIHdoZW4gZWxlbWVudCBpcyByZW1vdmVkIGZyb20gRE9NLlxuICovXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogXCJuZy1rZXlib2FyZC1zaG9ydGN1dHNcIixcbiAgICB0ZW1wbGF0ZTogXCJcIlxufSlcbmV4cG9ydCBjbGFzcyBLZXlib2FyZFNob3J0Y3V0c0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICAgIC8qKlxuICAgICAqIEEgbGlzdCBvZiBzaG9ydGN1dHMuXG4gICAgICovXG4gICAgQElucHV0KCkgc2hvcnRjdXRzOiBTaG9ydGN1dElucHV0W10gfCBTaG9ydGN1dElucHV0ID0gW107XG5cbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICogbGlzdCBvZiByZWdpc3RlcmVkIGtleWJvYXJkIHNob3J0Y3V0c1xuICAgICAqIHVzZWQgZm9yIGNsZWFuIHVwIG9uIE5nRGVzdHJveS5cbiAgICAgKi9cbiAgICBwcml2YXRlIGNsZWFySWRzOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIHByaXZhdGUgX2Rpc2FibGVkID0gZmFsc2U7XG4gICAgLyoqXG4gICAgICogRGlzYWJsZSBhbGwgc2hvcnRjdXRzIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBASW5wdXQoKSBzZXQgZGlzYWJsZWQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fZGlzYWJsZWQgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHRoaXMuY2xlYXJJZHMpIHtcbiAgICAgICAgICAgIHRoaXMua2V5Ym9hcmQucmVtb3ZlKHRoaXMuY2xlYXJJZHMpO1xuICAgICAgICAgICAgdGhpcy5jbGVhcklkcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2xlYXJJZHMgPSB0aGlzLmtleWJvYXJkLmFkZCh0aGlzLnNob3J0Y3V0cyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqIEBwYXJhbSB7S2V5Ym9hcmRTaG9ydGN1dHNTZXJ2aWNlfSBrZXlib2FyZFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUga2V5Ym9hcmQ6IEtleWJvYXJkU2hvcnRjdXRzU2VydmljZSkge31cblxuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBuZ09uSW5pdCgpIHt9XG5cbiAgICAvKipcbiAgICAgKiBTZWxlY3QgYSBrZXkgdG8gbGlzdGVuIHRvLCB3aWxsIGVtaXQgd2hlbiB0aGUgc2VsZWN0ZWQga2V5IGlzIHByZXNzZWQuXG4gICAgICovXG4gICAgcHVibGljIHNlbGVjdChrZXk6IHN0cmluZyk6IE9ic2VydmFibGU8U2hvcnRjdXRFdmVudE91dHB1dD4ge1xuICAgICAgICByZXR1cm4gdGhpcy5rZXlib2FyZC5zZWxlY3Qoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge31cblxuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgICAgIGlmICghY2hhbmdlcy5zaG9ydGN1dHMgfHwgIWNoYW5nZXMuc2hvcnRjdXRzLmN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNsZWFySWRzKSB7XG4gICAgICAgICAgICB0aGlzLmtleWJvYXJkLnJlbW92ZSh0aGlzLmNsZWFySWRzKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuY2xlYXJJZHMgPSB0aGlzLmtleWJvYXJkLmFkZChjaGFuZ2VzLnNob3J0Y3V0cy5jdXJyZW50VmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgICAgIHRoaXMua2V5Ym9hcmQucmVtb3ZlKHRoaXMuY2xlYXJJZHMpO1xuICAgIH1cbn1cbiJdfQ==