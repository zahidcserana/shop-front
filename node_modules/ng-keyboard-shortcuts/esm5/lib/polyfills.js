var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
if (!Element.prototype.matches) {
    Element.prototype.matches = Element.prototype.msMatchesSelector ||
        Element.prototype.webkitMatchesSelector;
}
if (!Element.prototype.closest) {
    Element.prototype.closest = function (s) {
        var el = this;
        do {
            if (el.matches(s))
                return el;
            el = el.parentElement || el.parentNode;
        } while (el !== null && el.nodeType === 1);
        return null;
    };
}
if (!Array.prototype.flat) {
    Array.prototype.flat = function (depth) {
        var flattend = [];
        (function flat(array, depth) {
            var e_1, _a;
            try {
                for (var array_1 = __values(array), array_1_1 = array_1.next(); !array_1_1.done; array_1_1 = array_1.next()) {
                    var el = array_1_1.value;
                    if (Array.isArray(el) && depth > 0) {
                        flat(el, depth - 1);
                    }
                    else {
                        flattend.push(el);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (array_1_1 && !array_1_1.done && (_a = array_1.return)) _a.call(array_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        })(this, Math.floor(depth) || 1);
        return flattend;
    };
}
if (!Array.prototype.flatMap) {
    Array.prototype.flatMap = function () {
        return Array.prototype.map.apply(this, arguments).flat(1);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9seWZpbGxzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmcta2V5Ym9hcmQtc2hvcnRjdXRzLyIsInNvdXJjZXMiOlsibGliL3BvbHlmaWxscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFO0lBQzVCLE9BQU8sQ0FBQyxTQUFTLENBQUMsT0FBTyxHQUFJLE9BQU8sQ0FBQyxTQUFpQixDQUFDLGlCQUFpQjtRQUNwRSxPQUFPLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDO0NBQy9DO0FBRUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFO0lBQzVCLE9BQU8sQ0FBQyxTQUFTLENBQUMsT0FBTyxHQUFHLFVBQVMsQ0FBQztRQUNsQyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFFZCxHQUFHO1lBQ0MsSUFBSSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztnQkFBRSxPQUFPLEVBQUUsQ0FBQztZQUM3QixFQUFFLEdBQUcsRUFBRSxDQUFDLGFBQWEsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDO1NBQzFDLFFBQVEsRUFBRSxLQUFLLElBQUksSUFBSSxFQUFFLENBQUMsUUFBUSxLQUFLLENBQUMsRUFBRTtRQUMzQyxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDLENBQUM7Q0FDTDtBQUVELElBQUksQ0FBRSxLQUFLLENBQUMsU0FBaUIsQ0FBQyxJQUFJLEVBQUU7SUFDL0IsS0FBSyxDQUFDLFNBQWlCLENBQUMsSUFBSSxHQUFHLFVBQVMsS0FBSztRQUMxQyxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDbEIsQ0FBQyxTQUFTLElBQUksQ0FBQyxLQUFLLEVBQUUsS0FBSzs7O2dCQUN2QixLQUFlLElBQUEsVUFBQSxTQUFBLEtBQUssQ0FBQSw0QkFBQSwrQ0FBRTtvQkFBakIsSUFBSSxFQUFFLGtCQUFBO29CQUNQLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFO3dCQUNoQyxJQUFJLENBQUMsRUFBRSxFQUFFLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztxQkFDdkI7eUJBQU07d0JBQ0gsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztxQkFDckI7aUJBQ0o7Ozs7Ozs7OztRQUNMLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLE9BQU8sUUFBUSxDQUFDO0lBQ3BCLENBQUMsQ0FBQztDQUNMO0FBRUQsSUFBSSxDQUFFLEtBQUssQ0FBQyxTQUFpQixDQUFDLE9BQU8sRUFBRTtJQUNsQyxLQUFLLENBQUMsU0FBaUIsQ0FBQyxPQUFPLEdBQUc7UUFDL0IsT0FBTyxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5RCxDQUFDLENBQUM7Q0FDTCIsInNvdXJjZXNDb250ZW50IjpbImlmICghRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcykge1xuICAgIEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMgPSAoRWxlbWVudC5wcm90b3R5cGUgYXMgYW55KS5tc01hdGNoZXNTZWxlY3RvciB8fFxuICAgICAgICBFbGVtZW50LnByb3RvdHlwZS53ZWJraXRNYXRjaGVzU2VsZWN0b3I7XG59XG5cbmlmICghRWxlbWVudC5wcm90b3R5cGUuY2xvc2VzdCkge1xuICAgIEVsZW1lbnQucHJvdG90eXBlLmNsb3Nlc3QgPSBmdW5jdGlvbihzKSB7XG4gICAgICAgIGxldCBlbCA9IHRoaXM7XG5cbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgaWYgKGVsLm1hdGNoZXMocykpIHJldHVybiBlbDtcbiAgICAgICAgICAgIGVsID0gZWwucGFyZW50RWxlbWVudCB8fCBlbC5wYXJlbnROb2RlO1xuICAgICAgICB9IHdoaWxlIChlbCAhPT0gbnVsbCAmJiBlbC5ub2RlVHlwZSA9PT0gMSk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG59XG5cbmlmICghKEFycmF5LnByb3RvdHlwZSBhcyBhbnkpLmZsYXQpIHtcbiAgICAoQXJyYXkucHJvdG90eXBlIGFzIGFueSkuZmxhdCA9IGZ1bmN0aW9uKGRlcHRoKSB7XG4gICAgICAgIHZhciBmbGF0dGVuZCA9IFtdO1xuICAgICAgICAoZnVuY3Rpb24gZmxhdChhcnJheSwgZGVwdGgpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGVsIG9mIGFycmF5KSB7XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZWwpICYmIGRlcHRoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBmbGF0KGVsLCBkZXB0aCAtIDEpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZsYXR0ZW5kLnB1c2goZWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkodGhpcywgTWF0aC5mbG9vcihkZXB0aCkgfHwgMSk7XG4gICAgICAgIHJldHVybiBmbGF0dGVuZDtcbiAgICB9O1xufVxuXG5pZiAoIShBcnJheS5wcm90b3R5cGUgYXMgYW55KS5mbGF0TWFwKSB7XG4gICAgKEFycmF5LnByb3RvdHlwZSBhcyBhbnkpLmZsYXRNYXAgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5tYXAuYXBwbHkodGhpcywgYXJndW1lbnRzKS5mbGF0KDEpO1xuICAgIH07XG59Il19