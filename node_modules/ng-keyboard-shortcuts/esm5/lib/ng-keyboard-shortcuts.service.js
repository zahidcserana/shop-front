import * as tslib_1 from "tslib";
import { Injectable } from "@angular/core";
import { _KEYCODE_MAP, _MAP, _SHIFT_MAP, modifiers } from "./keys";
import { BehaviorSubject, fromEvent, Subject, throwError, timer, of } from "rxjs";
import { catchError, filter, map, repeat, scan, switchMap, takeUntil, tap, throttle } from "rxjs/operators";
import { allPass, any, difference, identity, isFunction, isNill, maxArrayProp } from "./utils";
import * as i0 from "@angular/core";
/**
 * @ignore
 * @type {number}
 */
var guid = 0;
var KeyboardShortcutsService = /** @class */ (function () {
    /**
     * @ignore
     */
    function KeyboardShortcutsService() {
        var _this = this;
        /**
         * Parsed shortcuts
         * for each key create a predicate function
         */
        this._shortcuts = [];
        this._sequences = [];
        /**
         * Throttle the keypress event.
         */
        this.throttleTime = 0;
        this._pressed = new Subject();
        /**
         * Streams of pressed events, can be used instead or with a command.
         */
        this.pressed$ = this._pressed.asObservable();
        /**
         * Disable all keyboard shortcuts
         */
        this.disabled = false;
        this._shortcutsSub = new BehaviorSubject([]);
        this.shortcuts$ = this._shortcutsSub
            .asObservable()
            .pipe(filter(function (shortcuts) { return !!shortcuts.length; }));
        this._ignored = ["INPUT", "TEXTAREA", "SELECT"];
        /**
         * @ignore
         * Subscription for on destroy.
         */
        this.subscriptions = [];
        /**
         * @ignore
         * @param shortcut
         */
        this.isAllowed = function (shortcut) {
            var target = shortcut.event.target;
            if (target === shortcut.target) {
                return true;
            }
            if (shortcut.allowIn.length) {
                return !difference(_this._ignored, shortcut.allowIn).includes(target.nodeName);
            }
            return !_this._ignored.includes(target.nodeName);
        };
        /**
         * @ignore
         * @param event
         */
        this.mapEvent = function (event) {
            return _this._shortcuts
                .map(function (shortcut) {
                return Object.assign({}, shortcut, {
                    predicates: any(identity, shortcut.predicates.map(function (predicates) { return allPass(predicates)(event); })),
                    event: event
                });
            })
                .filter(function (shortcut) { return shortcut.predicates; })
                .reduce(function (acc, shortcut) { return (acc.priority > shortcut.priority ? acc : shortcut); }, {
                priority: 0
            });
        };
        /**
         * @ignore
         */
        this.keydown$ = fromEvent(document, "keydown");
        /**
         * @ignore
         */
        this.keydownCombo$ = this.keydown$.pipe(filter(function (_) { return !_this.disabled; }), map(this.mapEvent), filter(function (shortcut) {
            return !shortcut.target || shortcut.event.target === shortcut.target;
        }), filter(function (shortcut) { return isFunction(shortcut.command); }), filter(this.isAllowed), tap(function (shortcut) { return !shortcut.preventDefault || shortcut.event.preventDefault(); }), throttle(function (shortcut) { return timer(shortcut.throttleTime); }), tap(function (shortcut) { return shortcut.command({ event: shortcut.event, key: shortcut.key }); }), tap(function (shortcut) { return _this._pressed.next({ event: shortcut.event, key: shortcut.key }); }), catchError(function (error) { return throwError(error); }));
        /**
         * @ignore
         */
        this.timer$ = new Subject();
        /**
         * @ignore
         */
        this.resetCounter$ = this.timer$
            .asObservable()
            .pipe(switchMap(function () { return timer(KeyboardShortcutsService_1.TIMEOUT_SEQUENCE); }));
        /**
         * @ignore
         */
        this.keydownSequence$ = this.shortcuts$.pipe(map(function (shortcuts) { return shortcuts.filter(function (shortcut) { return shortcut.isSequence; }); }), switchMap(function (sequences) {
            return _this.keydown$.pipe(map(function (event) {
                return {
                    event: event,
                    sequences: sequences
                };
            }), tap(_this.timer$));
        }), scan(function (acc, arg) {
            var event = arg.event;
            var currentLength = acc.events.length;
            var sequences = currentLength ? acc.sequences : arg.sequences;
            var _a = tslib_1.__read(_this.characterFromEvent(event), 1), characters = _a[0];
            characters = Array.isArray(characters) ? characters : [characters];
            var result = sequences
                .map(function (sequence) {
                var sequences = sequence.sequence.filter(function (seque) { return characters.some(function (key) { return seque[currentLength] === key; }); });
                var partialMatch = sequences.length > 0;
                if (sequence.fullMatch) {
                    return sequence;
                }
                return tslib_1.__assign({}, sequence, { sequence: sequences, partialMatch: partialMatch, event: event, fullMatch: partialMatch &&
                        _this.isFullMatch({ command: sequence, events: acc.events }) });
            })
                .filter(function (sequences) { return sequences.partialMatch || sequences.fullMatch; });
            var _b = tslib_1.__read(result, 1), match = _b[0];
            if (!match || _this.modifiersOn(event)) {
                return { events: [], sequences: _this._sequences };
            }
            /*
             * handle case of "?" sequence and "? a" sequence
             * need to determine which one to trigger.
             * if both match, we pick the longer one (? a) in this case.
             */
            var guess = maxArrayProp('priority', result);
            if (result.length > 1 && guess.fullMatch) {
                return { events: [], command: guess, sequences: _this._sequences };
            }
            if (result.length > 1) {
                return { events: tslib_1.__spread(acc.events, [event]), command: result, sequences: result };
            }
            if (match.fullMatch) {
                return { events: [], command: match, sequences: _this._sequences };
            }
            return { events: tslib_1.__spread(acc.events, [event]), command: result, sequences: result };
        }, { events: [], sequences: [] }), switchMap(function (_a) {
            var command = _a.command;
            if (Array.isArray(command)) {
                /*
                 * Add a timer to handle the case where for example:
                 * a sequence "?" is registered and "? a" is registered as well
                 * if the user does not hit any key for 500ms, the single sequence will trigger
                 * if any keydown event occur, this timer will reset, given a chance to complete
                 * the full sequence (? a) in this case.
                 * This delay only occurs when single key sequence is the beginning of another sequence.
                 */
                return timer(500).pipe(map(function () { return ({ command: command.filter(function (command) { return command.fullMatch; })[0] }); }));
            }
            return of({ command: command });
        }), filter(function (_a) {
            var command = _a.command;
            return command && command.fullMatch;
        }), map(function (_a) {
            var command = _a.command;
            return command;
        }), filter(function (shortcut) { return isFunction(shortcut.command); }), filter(this.isAllowed), tap(function (shortcut) { return !shortcut.preventDefault || shortcut.event.preventDefault(); }), throttle(function (shortcut) { return timer(shortcut.throttleTime); }), tap(function (shortcut) { return shortcut.command({ event: shortcut.event, key: shortcut.key }); }), tap(function (shortcut) { return _this._pressed.next({ event: shortcut.event, key: shortcut.key }); }), takeUntil(this.resetCounter$), repeat());
        /**
         * @ignore
         * transforms a shortcut to:
         * a predicate function
         */
        this.getKeys = function (keys) {
            return keys
                .map(function (key) { return key.trim().toLowerCase(); })
                .filter(function (key) { return key !== "+"; })
                .map(function (key) {
                // for modifiers like control key
                // look for event['ctrlKey']
                // otherwise use the keyCode
                if (modifiers.hasOwnProperty(key)) {
                    return function (event) { return !!event[modifiers[key]]; };
                }
                return function (event) {
                    var _a = tslib_1.__read(_this.characterFromEvent(event), 2), characters = _a[0], shiftKey = _a[1];
                    characters = Array.isArray(characters) ? characters : [characters];
                    return characters.some(function (char) {
                        if (char === key && shiftKey) {
                            return true;
                        }
                        return key === char;
                    });
                };
            });
        };
        this.subscriptions.push(this.keydownSequence$.subscribe(), this.keydownCombo$.subscribe());
    }
    KeyboardShortcutsService_1 = KeyboardShortcutsService;
    /**
     * @ignore
     * @param command
     * @param events
     */
    KeyboardShortcutsService.prototype.isFullMatch = function (_a) {
        var command = _a.command, events = _a.events;
        if (!command) {
            return false;
        }
        return command.sequence.some(function (sequence) {
            return sequence.length === events.length + 1;
        });
    };
    Object.defineProperty(KeyboardShortcutsService.prototype, "shortcuts", {
        /**
         * @ignore
         */
        get: function () {
            return this._shortcuts;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @ignore
     * @param event
     */
    KeyboardShortcutsService.prototype._characterFromEvent = function (event) {
        if (typeof event.which !== "number") {
            event.which = event.keyCode;
        }
        // for non keypress events the special maps are needed
        if (_MAP[event.which]) {
            return [_MAP[event.which], event.shiftKey];
        }
        if (_KEYCODE_MAP[event.which]) {
            return [_KEYCODE_MAP[event.which], event.shiftKey];
        }
        // if it is not in the special map
        // with keydown and keyup events the character seems to always
        // come in as an uppercase character whether you are pressing shift
        // or not.  we should make sure it is always lowercase for comparisons
        return [String.fromCharCode(event.which).toLowerCase(), event.shiftKey];
    };
    KeyboardShortcutsService.prototype.characterFromEvent = function (event) {
        var _a = tslib_1.__read(this._characterFromEvent(event), 2), key = _a[0], shiftKey = _a[1];
        if (shiftKey && _SHIFT_MAP[key]) {
            return [_SHIFT_MAP[key], shiftKey];
        }
        return [key, shiftKey];
    };
    /**
     * @ignore
     * Remove subscription.
     */
    KeyboardShortcutsService.prototype.ngOnDestroy = function () {
        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });
    };
    /**
     * @ignore
     * @param shortcuts
     */
    KeyboardShortcutsService.prototype.isSequence = function (shortcuts) {
        return !shortcuts.some(function (shortcut) { return shortcut.includes("+"); });
    };
    /**
     * Add new shortcut/s
     */
    KeyboardShortcutsService.prototype.add = function (shortcuts) {
        var _this = this;
        shortcuts = Array.isArray(shortcuts) ? shortcuts : [shortcuts];
        var commands = this.parseCommand(shortcuts);
        commands.forEach(function (command) {
            if (command.isSequence) {
                _this._sequences.push(command);
                return;
            }
            _this._shortcuts.push(command);
        });
        setTimeout(function () {
            _this._shortcutsSub.next(tslib_1.__spread(_this._shortcuts, _this._sequences));
        });
        return commands.map(function (command) { return command.id; });
    };
    /**
     * Remove a command based on key or array of keys.
     * can be used for cleanup.
     * @returns
     * @param ids
     */
    KeyboardShortcutsService.prototype.remove = function (ids) {
        var _this = this;
        ids = Array.isArray(ids) ? ids : [ids];
        this._shortcuts = this._shortcuts.filter(function (shortcut) { return !ids.includes(shortcut.id); });
        this._sequences = this._sequences.filter(function (shortcut) { return !ids.includes(shortcut.id); });
        setTimeout(function () {
            _this._shortcutsSub.next(tslib_1.__spread(_this._shortcuts, _this._sequences));
        });
        return this;
    };
    /**
     * Returns an observable of keyboard shortcut filtered by a specific key.
     * @param key - the key to filter the observable by.
     */
    KeyboardShortcutsService.prototype.select = function (key) {
        return this.pressed$.pipe(filter(function (_a) {
            var event = _a.event, eventKeys = _a.key;
            eventKeys = Array.isArray(eventKeys) ? eventKeys : [eventKeys];
            return !!eventKeys.find(function (eventKey) { return eventKey === key; });
        }));
    };
    /**
     * @ignore
     * @param event
     */
    KeyboardShortcutsService.prototype.modifiersOn = function (event) {
        return ["metaKey", "altKey", "ctrlKey"].some(function (mod) { return event[mod]; });
    };
    /**
     * @ignore
     * Parse each command using getKeys function
     */
    KeyboardShortcutsService.prototype.parseCommand = function (command) {
        var _this = this;
        var commands = Array.isArray(command) ? command : [command];
        return commands.map(function (command) {
            var keys = Array.isArray(command.key) ? command.key : [command.key];
            var priority = Math.max.apply(Math, tslib_1.__spread(keys.map(function (key) { return key.split(" ").filter(identity).length; })));
            var predicates = keys.map(function (key) { return _this.getKeys(key.split(" ").filter(identity)); });
            var isSequence = _this.isSequence(keys);
            var sequence = isSequence
                ? keys.map(function (key) {
                    return key
                        .split(" ")
                        .filter(identity)
                        .map(function (key) { return key.trim(); });
                })
                : [];
            return tslib_1.__assign({}, command, { isSequence: isSequence, sequence: isSequence ? sequence : [], allowIn: command.allowIn || [], key: keys, id: "" + guid++, throttle: isNill(command.throttleTime) ? _this.throttleTime : command.throttleTime, priority: priority, predicates: predicates });
        });
    };
    var KeyboardShortcutsService_1;
    /**
     * @ignore
     * 2000 ms window to allow between key sequences otherwise
     * the sequence will reset.
     */
    KeyboardShortcutsService.TIMEOUT_SEQUENCE = 1000;
    KeyboardShortcutsService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function KeyboardShortcutsService_Factory() { return new KeyboardShortcutsService(); }, token: KeyboardShortcutsService, providedIn: "root" });
    KeyboardShortcutsService = KeyboardShortcutsService_1 = tslib_1.__decorate([
        Injectable({
            providedIn: "root"
        }),
        tslib_1.__metadata("design:paramtypes", [])
    ], KeyboardShortcutsService);
    return KeyboardShortcutsService;
}());
export { KeyboardShortcutsService };
//# sourceMappingURL=data:application/json;base64,