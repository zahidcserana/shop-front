var _this = this;
import * as tslib_1 from "tslib";
export function isFunction(x) {
    return typeof x === "function";
}
export var any = function (fn, list) {
    var idx = 0;
    while (idx < list.length) {
        if (fn(list[idx])) {
            return true;
        }
        idx += 1;
    }
    return false;
};
export var identity = function (x) { return x; };
/**
 * @ignore
 * @param x
 * @returns boolean
 */
export var isNill = function (x) { return x == null; };
/**
 * @ignore
 * @param xs
 * @param key
 * @returns any
 */
export var groupBy = function (xs, key) {
    return xs.reduce(function (result, x) {
        var _a;
        return (tslib_1.__assign({}, result, (_a = {}, _a[x[key]] = tslib_1.__spread((result[x[key]] || []), [x]), _a)));
    }, {});
};
/**
 * @ignore
 * @param first
 * @param second
 * @returns any[]
 */
export var difference = function (first, second) {
    return first.filter(function (item) { return !second.includes(item); });
};
/**
 * @ignore
 * @param preds
 * @returns (...args) => boolean;
 */
export var allPass = function (preds) { return function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var idx = 0;
    var len = preds.length;
    while (idx < len) {
        if (!preds[idx].apply(_this, args)) {
            return false;
        }
        idx += 1;
    }
    return true;
}; };
export var prop = function (prop) { return function (object) { return object[prop]; }; };
var minMaxArrayProp = function (type) { return function (property, array) {
    return Math[type].apply(Math, array.map(prop(property)));
}; };
var ɵ0 = minMaxArrayProp;
export var maxArrayProp = function (property, array) {
    var _a;
    return array.reduce(function (acc, curr) {
        var propFn = prop(property);
        var currentValue = propFn(curr);
        var previousValue = propFn(acc);
        return currentValue > previousValue ? curr : acc;
    }, (_a = {}, _a[property] = 0, _a));
};
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1rZXlib2FyZC1zaG9ydGN1dHMvIiwic291cmNlcyI6WyJsaWIvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBK0VFOztBQS9FRixNQUFNLFVBQVUsVUFBVSxDQUFDLENBQU07SUFDN0IsT0FBTyxPQUFPLENBQUMsS0FBSyxVQUFVLENBQUM7QUFDbkMsQ0FBQztBQUVELE1BQU0sQ0FBQyxJQUFNLEdBQUcsR0FBRyxVQUFDLEVBQVksRUFBRSxJQUFXO0lBQ3pDLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztJQUNaLE9BQU8sR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdEIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDZixPQUFPLElBQUksQ0FBQztTQUNmO1FBQ0QsR0FBRyxJQUFJLENBQUMsQ0FBQztLQUNaO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLElBQU0sUUFBUSxHQUFHLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxFQUFELENBQUMsQ0FBQztBQUUvQjs7OztHQUlHO0FBQ0gsTUFBTSxDQUFDLElBQU0sTUFBTSxHQUFHLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxJQUFJLElBQUksRUFBVCxDQUFTLENBQUM7QUFFckM7Ozs7O0dBS0c7QUFDSCxNQUFNLENBQUMsSUFBTSxPQUFPLEdBQUcsVUFBQyxFQUFFLEVBQUUsR0FBRztJQUMzQixPQUFBLEVBQUUsQ0FBQyxNQUFNLENBQ0wsVUFBQyxNQUFNLEVBQUUsQ0FBQzs7UUFBSyxPQUFBLHNCQUNSLE1BQU0sZUFDUixDQUFDLENBQUMsR0FBRyxDQUFDLHFCQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFFLENBQUMsU0FDekM7SUFIYSxDQUdiLEVBQ0YsRUFBRSxDQUNMO0FBTkQsQ0FNQyxDQUFDO0FBRU47Ozs7O0dBS0c7QUFDSCxNQUFNLENBQUMsSUFBTSxVQUFVLEdBQUcsVUFBQyxLQUFZLEVBQUUsTUFBYTtJQUNsRCxPQUFBLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQXRCLENBQXNCLENBQUM7QUFBNUMsQ0FBNEMsQ0FBQztBQUVqRDs7OztHQUlHO0FBQ0gsTUFBTSxDQUFDLElBQU0sT0FBTyxHQUFHLFVBQUEsS0FBSyxJQUFJLE9BQUE7SUFBQyxjQUFPO1NBQVAsVUFBTyxFQUFQLHFCQUFPLEVBQVAsSUFBTztRQUFQLHlCQUFPOztJQUNwQyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDWixJQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO0lBQ3pCLE9BQU8sR0FBRyxHQUFHLEdBQUcsRUFBRTtRQUNkLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUksRUFBRSxJQUFJLENBQUMsRUFBRTtZQUMvQixPQUFPLEtBQUssQ0FBQztTQUNoQjtRQUNELEdBQUcsSUFBSSxDQUFDLENBQUM7S0FDWjtJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2hCLENBQUMsRUFWK0IsQ0FVL0IsQ0FBQztBQUNGLE1BQU0sQ0FBQyxJQUFNLElBQUksR0FBRyxVQUFBLElBQUksSUFBSSxPQUFBLFVBQUEsTUFBTSxJQUFJLE9BQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFaLENBQVksRUFBdEIsQ0FBc0IsQ0FBQztBQUVuRCxJQUFNLGVBQWUsR0FBRyxVQUFBLElBQUksSUFBSSxPQUFBLFVBQUMsUUFBUSxFQUFFLEtBQUs7SUFDNUMsT0FBQSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQWpELENBQWlELEVBRHJCLENBQ3FCLENBQUM7O0FBRXRELE1BQU0sQ0FBQyxJQUFNLFlBQVksR0FBRyxVQUFDLFFBQVEsRUFBRSxLQUFLOztJQUN4QyxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQ2YsVUFBQyxHQUFHLEVBQUUsSUFBSTtRQUNOLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM5QixJQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEMsSUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xDLE9BQU8sWUFBWSxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFDckQsQ0FBQyxZQUNDLEdBQUMsUUFBUSxJQUFHLENBQUMsTUFDbEIsQ0FBQztBQUNOLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBpc0Z1bmN0aW9uKHg6IGFueSk6IHggaXMgRnVuY3Rpb24ge1xuICAgIHJldHVybiB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiO1xufVxuXG5leHBvcnQgY29uc3QgYW55ID0gKGZuOiBGdW5jdGlvbiwgbGlzdDogYW55W10pID0+IHtcbiAgICBsZXQgaWR4ID0gMDtcbiAgICB3aGlsZSAoaWR4IDwgbGlzdC5sZW5ndGgpIHtcbiAgICAgICAgaWYgKGZuKGxpc3RbaWR4XSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlkeCArPSAxO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuXG5leHBvcnQgY29uc3QgaWRlbnRpdHkgPSB4ID0+IHg7XG5cbi8qKlxuICogQGlnbm9yZVxuICogQHBhcmFtIHhcbiAqIEByZXR1cm5zIGJvb2xlYW5cbiAqL1xuZXhwb3J0IGNvbnN0IGlzTmlsbCA9IHggPT4geCA9PSBudWxsO1xuXG4vKipcbiAqIEBpZ25vcmVcbiAqIEBwYXJhbSB4c1xuICogQHBhcmFtIGtleVxuICogQHJldHVybnMgYW55XG4gKi9cbmV4cG9ydCBjb25zdCBncm91cEJ5ID0gKHhzLCBrZXkpID0+XG4gICAgeHMucmVkdWNlKFxuICAgICAgICAocmVzdWx0LCB4KSA9PiAoe1xuICAgICAgICAgICAgLi4ucmVzdWx0LFxuICAgICAgICAgICAgW3hba2V5XV06IFsuLi4ocmVzdWx0W3hba2V5XV0gfHwgW10pLCB4XVxuICAgICAgICB9KSxcbiAgICAgICAge31cbiAgICApO1xuXG4vKipcbiAqIEBpZ25vcmVcbiAqIEBwYXJhbSBmaXJzdFxuICogQHBhcmFtIHNlY29uZFxuICogQHJldHVybnMgYW55W11cbiAqL1xuZXhwb3J0IGNvbnN0IGRpZmZlcmVuY2UgPSAoZmlyc3Q6IGFueVtdLCBzZWNvbmQ6IGFueVtdKSA9PlxuICAgIGZpcnN0LmZpbHRlcihpdGVtID0+ICFzZWNvbmQuaW5jbHVkZXMoaXRlbSkpO1xuXG4vKipcbiAqIEBpZ25vcmVcbiAqIEBwYXJhbSBwcmVkc1xuICogQHJldHVybnMgKC4uLmFyZ3MpID0+IGJvb2xlYW47XG4gKi9cbmV4cG9ydCBjb25zdCBhbGxQYXNzID0gcHJlZHMgPT4gKC4uLmFyZ3MpID0+IHtcbiAgICBsZXQgaWR4ID0gMDtcbiAgICBjb25zdCBsZW4gPSBwcmVkcy5sZW5ndGg7XG4gICAgd2hpbGUgKGlkeCA8IGxlbikge1xuICAgICAgICBpZiAoIXByZWRzW2lkeF0uYXBwbHkodGhpcywgYXJncykpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZHggKz0gMTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59O1xuZXhwb3J0IGNvbnN0IHByb3AgPSBwcm9wID0+IG9iamVjdCA9PiBvYmplY3RbcHJvcF07XG5cbmNvbnN0IG1pbk1heEFycmF5UHJvcCA9IHR5cGUgPT4gKHByb3BlcnR5LCBhcnJheSkgPT5cbiAgICBNYXRoW3R5cGVdLmFwcGx5KE1hdGgsIGFycmF5Lm1hcChwcm9wKHByb3BlcnR5KSkpO1xuXG5leHBvcnQgY29uc3QgbWF4QXJyYXlQcm9wID0gKHByb3BlcnR5LCBhcnJheSkgPT4ge1xuICAgIHJldHVybiBhcnJheS5yZWR1Y2UoXG4gICAgICAgIChhY2MsIGN1cnIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHByb3BGbiA9IHByb3AocHJvcGVydHkpO1xuICAgICAgICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gcHJvcEZuKGN1cnIpO1xuICAgICAgICAgICAgY29uc3QgcHJldmlvdXNWYWx1ZSA9IHByb3BGbihhY2MpO1xuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRWYWx1ZSA+IHByZXZpb3VzVmFsdWUgPyBjdXJyIDogYWNjO1xuICAgICAgICB9LFxuICAgICAgICB7IFtwcm9wZXJ0eV06IDAgfVxuICAgICk7XG59OyJdfQ==