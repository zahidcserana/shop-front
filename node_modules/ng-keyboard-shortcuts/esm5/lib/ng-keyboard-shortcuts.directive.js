import * as tslib_1 from "tslib";
import { Directive, ElementRef, Input } from "@angular/core";
import { AllowIn } from "./ng-keyboard-shortcuts.interfaces";
import { KeyboardShortcutsService } from "./ng-keyboard-shortcuts.service";
/**
 * A directive to be used with "focusable" elements, like:
 * textarea, input, select.
 */
var KeyboardShortcutsDirective = /** @class */ (function () {
    /**
     * @ignore
     * @param {KeyboardShortcutsService} keyboard
     * @param {ElementRef} el
     */
    function KeyboardShortcutsDirective(keyboard, el) {
        this.keyboard = keyboard;
        this.el = el;
        /**
         * @ignore
         * @type {boolean}
         * @private
         */
        this._disabled = false;
    }
    Object.defineProperty(KeyboardShortcutsDirective.prototype, "disabled", {
        /**
         * whether to disable the shortcuts for this directive
         * @param value
         */
        set: function (value) {
            var _this = this;
            this._disabled = value;
            if (this.clearIds) {
                this.keyboard.remove(this.clearIds);
            }
            setTimeout(function () {
                if (value === false && _this.ngKeyboardShortcuts) {
                    _this.clearIds = _this.keyboard.add(_this.transformInput(_this.ngKeyboardShortcuts));
                }
            });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @ignore
     * @param {Shortcut[]} shortcuts
     * @returns {any}
     */
    KeyboardShortcutsDirective.prototype.transformInput = function (shortcuts) {
        var _this = this;
        return shortcuts.map(function (shortcut) { return (tslib_1.__assign({}, shortcut, { target: _this.el.nativeElement, allowIn: [AllowIn.Select, AllowIn.Input, AllowIn.Textarea] })); });
    };
    /**
     * @ignore
     */
    KeyboardShortcutsDirective.prototype.ngOnDestroy = function () {
        if (!this.clearIds) {
            return;
        }
        this.keyboard.remove(this.clearIds);
    };
    /**
     * @ignore
     * @param {SimpleChanges} changes
     */
    KeyboardShortcutsDirective.prototype.ngOnChanges = function (changes) {
        var ngKeyboardShortcuts = changes.ngKeyboardShortcuts;
        if (this.clearIds) {
            this.keyboard.remove(this.clearIds);
        }
        if (!ngKeyboardShortcuts || !ngKeyboardShortcuts.currentValue) {
            return;
        }
        this.clearIds = this.keyboard.add(this.transformInput(ngKeyboardShortcuts.currentValue));
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Array)
    ], KeyboardShortcutsDirective.prototype, "ngKeyboardShortcuts", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], KeyboardShortcutsDirective.prototype, "disabled", null);
    KeyboardShortcutsDirective = tslib_1.__decorate([
        Directive({
            selector: "[ngKeyboardShortcuts]"
        }),
        tslib_1.__metadata("design:paramtypes", [KeyboardShortcutsService, ElementRef])
    ], KeyboardShortcutsDirective);
    return KeyboardShortcutsDirective;
}());
export { KeyboardShortcutsDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmcta2V5Ym9hcmQtc2hvcnRjdXRzLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWtleWJvYXJkLXNob3J0Y3V0cy8iLCJzb3VyY2VzIjpbImxpYi9uZy1rZXlib2FyZC1zaG9ydGN1dHMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQXVDLE1BQU0sZUFBZSxDQUFDO0FBQ2xHLE9BQU8sRUFBRSxPQUFPLEVBQVksTUFBTSxvQ0FBb0MsQ0FBQztBQUN2RSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUUzRTs7O0dBR0c7QUFJSDtJQWtDSTs7OztPQUlHO0lBQ0gsb0NBQW9CLFFBQWtDLEVBQVUsRUFBYztRQUExRCxhQUFRLEdBQVIsUUFBUSxDQUEwQjtRQUFVLE9BQUUsR0FBRixFQUFFLENBQVk7UUE3QjlFOzs7O1dBSUc7UUFDSyxjQUFTLEdBQUcsS0FBSyxDQUFDO0lBd0J1RCxDQUFDO0lBbEJ6RSxzQkFBSSxnREFBUTtRQUpyQjs7O1dBR0c7YUFDTSxVQUFhLEtBQUs7WUFBM0IsaUJBV0M7WUFWRyxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztZQUN2QixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQ3ZDO1lBQ0QsVUFBVSxDQUFDO2dCQUNQLElBQUksS0FBSyxLQUFLLEtBQUssSUFBSSxLQUFJLENBQUMsbUJBQW1CLEVBQUU7b0JBQzdDLEtBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSSxDQUFDLGNBQWMsQ0FBQyxLQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDO2lCQUNwRjtZQUNMLENBQUMsQ0FBQyxDQUFBO1FBRU4sQ0FBQzs7O09BQUE7SUFTRDs7OztPQUlHO0lBQ0ssbURBQWMsR0FBdEIsVUFBdUIsU0FBcUI7UUFBNUMsaUJBTUM7UUFMRyxPQUFPLFNBQVMsQ0FBQyxHQUFHLENBQUMsVUFBQSxRQUFRLElBQUksT0FBQSxzQkFDMUIsUUFBUSxJQUNYLE1BQU0sRUFBRSxLQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFDN0IsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFDNUQsRUFKK0IsQ0FJL0IsQ0FBQyxDQUFDO0lBQ1IsQ0FBQztJQUVEOztPQUVHO0lBQ0gsZ0RBQVcsR0FBWDtRQUNJLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2hCLE9BQU87U0FDVjtRQUNELElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsZ0RBQVcsR0FBWCxVQUFZLE9BQXNCO1FBQ3RCLElBQUEsaURBQW1CLENBQWE7UUFDeEMsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3ZDO1FBQ0QsSUFBSSxDQUFDLG1CQUFtQixJQUFJLENBQUMsbUJBQW1CLENBQUMsWUFBWSxFQUFFO1lBQzNELE9BQU87U0FDVjtRQUNELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO0lBQzdGLENBQUM7SUFwRVE7UUFBUixLQUFLLEVBQUU7OzJFQUFpQztJQVloQztRQUFSLEtBQUssRUFBRTs7OzhEQVdQO0lBaENRLDBCQUEwQjtRQUh0QyxTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsdUJBQXVCO1NBQ3BDLENBQUM7aURBd0NnQyx3QkFBd0IsRUFBYyxVQUFVO09BdkNyRSwwQkFBMEIsQ0E4RXRDO0lBQUQsaUNBQUM7Q0FBQSxBQTlFRCxJQThFQztTQTlFWSwwQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBBbGxvd0luLCBTaG9ydGN1dCB9IGZyb20gXCIuL25nLWtleWJvYXJkLXNob3J0Y3V0cy5pbnRlcmZhY2VzXCI7XG5pbXBvcnQgeyBLZXlib2FyZFNob3J0Y3V0c1NlcnZpY2UgfSBmcm9tIFwiLi9uZy1rZXlib2FyZC1zaG9ydGN1dHMuc2VydmljZVwiO1xuXG4vKipcbiAqIEEgZGlyZWN0aXZlIHRvIGJlIHVzZWQgd2l0aCBcImZvY3VzYWJsZVwiIGVsZW1lbnRzLCBsaWtlOlxuICogdGV4dGFyZWEsIGlucHV0LCBzZWxlY3QuXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiBcIltuZ0tleWJvYXJkU2hvcnRjdXRzXVwiXG59KVxuZXhwb3J0IGNsYXNzIEtleWJvYXJkU2hvcnRjdXRzRGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95LCBPbkNoYW5nZXMge1xuICAgIC8qKlxuICAgICAqIGNsZWFySWQgdG8gcmVtb3ZlIHNob3J0Y3V0cy5cbiAgICAgKi9cbiAgICBwcml2YXRlIGNsZWFySWRzO1xuICAgIC8qKlxuICAgICAqIFNob3J0Y3V0IGlucHV0cyBmb3IgdGhlIGRpcmVjdGl2ZS5cbiAgICAgKiB3aWxsIG9ubHkgd29yayB3aGVuIHRoZSBlbGVtZW50IGlzIGluIGZvY3VzXG4gICAgICovXG4gICAgQElucHV0KCkgbmdLZXlib2FyZFNob3J0Y3V0czogU2hvcnRjdXRbXTtcbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBwcml2YXRlIF9kaXNhYmxlZCA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogd2hldGhlciB0byBkaXNhYmxlIHRoZSBzaG9ydGN1dHMgZm9yIHRoaXMgZGlyZWN0aXZlXG4gICAgICogQHBhcmFtIHZhbHVlXG4gICAgICovXG4gICAgQElucHV0KCkgc2V0IGRpc2FibGVkKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2Rpc2FibGVkID0gdmFsdWU7XG4gICAgICAgIGlmICh0aGlzLmNsZWFySWRzKSB7XG4gICAgICAgICAgICB0aGlzLmtleWJvYXJkLnJlbW92ZSh0aGlzLmNsZWFySWRzKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gZmFsc2UgJiYgdGhpcy5uZ0tleWJvYXJkU2hvcnRjdXRzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhcklkcyA9IHRoaXMua2V5Ym9hcmQuYWRkKHRoaXMudHJhbnNmb3JtSW5wdXQodGhpcy5uZ0tleWJvYXJkU2hvcnRjdXRzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICogQHBhcmFtIHtLZXlib2FyZFNob3J0Y3V0c1NlcnZpY2V9IGtleWJvYXJkXG4gICAgICogQHBhcmFtIHtFbGVtZW50UmVmfSBlbFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUga2V5Ym9hcmQ6IEtleWJvYXJkU2hvcnRjdXRzU2VydmljZSwgcHJpdmF0ZSBlbDogRWxlbWVudFJlZikge31cblxuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKiBAcGFyYW0ge1Nob3J0Y3V0W119IHNob3J0Y3V0c1xuICAgICAqIEByZXR1cm5zIHthbnl9XG4gICAgICovXG4gICAgcHJpdmF0ZSB0cmFuc2Zvcm1JbnB1dChzaG9ydGN1dHM6IFNob3J0Y3V0W10pIHtcbiAgICAgICAgcmV0dXJuIHNob3J0Y3V0cy5tYXAoc2hvcnRjdXQgPT4gKHtcbiAgICAgICAgICAgIC4uLnNob3J0Y3V0LFxuICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgICAgICBhbGxvd0luOiBbQWxsb3dJbi5TZWxlY3QsIEFsbG93SW4uSW5wdXQsIEFsbG93SW4uVGV4dGFyZWFdXG4gICAgICAgIH0pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIGlmICghdGhpcy5jbGVhcklkcykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMua2V5Ym9hcmQucmVtb3ZlKHRoaXMuY2xlYXJJZHMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKiBAcGFyYW0ge1NpbXBsZUNoYW5nZXN9IGNoYW5nZXNcbiAgICAgKi9cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgICAgIGNvbnN0IHsgbmdLZXlib2FyZFNob3J0Y3V0cyB9ID0gY2hhbmdlcztcbiAgICAgICAgaWYgKHRoaXMuY2xlYXJJZHMpIHtcbiAgICAgICAgICAgIHRoaXMua2V5Ym9hcmQucmVtb3ZlKHRoaXMuY2xlYXJJZHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbmdLZXlib2FyZFNob3J0Y3V0cyB8fCAhbmdLZXlib2FyZFNob3J0Y3V0cy5jdXJyZW50VmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNsZWFySWRzID0gdGhpcy5rZXlib2FyZC5hZGQodGhpcy50cmFuc2Zvcm1JbnB1dChuZ0tleWJvYXJkU2hvcnRjdXRzLmN1cnJlbnRWYWx1ZSkpO1xuICAgIH1cbn1cbiJdfQ==