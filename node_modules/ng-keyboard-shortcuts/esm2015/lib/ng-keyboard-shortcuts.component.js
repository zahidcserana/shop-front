import * as tslib_1 from "tslib";
import { Component, Input } from "@angular/core";
import { KeyboardShortcutsService } from "./ng-keyboard-shortcuts.service";
/**
 * A component to bind global shortcuts, can be used multiple times across the app
 * will remove registered shortcuts when element is removed from DOM.
 */
let KeyboardShortcutsComponent = class KeyboardShortcutsComponent {
    /**
     * @ignore
     * @param {KeyboardShortcutsService} keyboard
     */
    constructor(keyboard) {
        this.keyboard = keyboard;
        /**
         * A list of shortcuts.
         */
        this.shortcuts = [];
        /**
         * @ignore
         * list of registered keyboard shortcuts
         * used for clean up on NgDestroy.
         */
        this.clearIds = [];
        /**
         * @ignore
         */
        this._disabled = false;
    }
    /**
     * Disable all shortcuts for this component.
     */
    set disabled(value) {
        this._disabled = value;
        if (this.clearIds) {
            this.keyboard.remove(this.clearIds);
            this.clearIds = [];
        }
        if (value) {
            return;
        }
        this.clearIds = this.keyboard.add(this.shortcuts);
    }
    /**
     * @ignore
     */
    ngOnInit() { }
    /**
     * Select a key to listen to, will emit when the selected key is pressed.
     */
    select(key) {
        return this.keyboard.select(key);
    }
    /**
     * @ignore
     */
    ngAfterViewInit() { }
    /**
     * @ignore
     */
    ngOnChanges(changes) {
        if (!changes.shortcuts || !changes.shortcuts.currentValue) {
            return;
        }
        if (this.clearIds) {
            this.keyboard.remove(this.clearIds);
        }
        setTimeout(() => this.clearIds = this.keyboard.add(changes.shortcuts.currentValue));
    }
    /**
     * @ignore
     */
    ngOnDestroy() {
        this.keyboard.remove(this.clearIds);
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], KeyboardShortcutsComponent.prototype, "shortcuts", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], KeyboardShortcutsComponent.prototype, "disabled", null);
KeyboardShortcutsComponent = tslib_1.__decorate([
    Component({
        selector: "ng-keyboard-shortcuts",
        template: ""
    }),
    tslib_1.__metadata("design:paramtypes", [KeyboardShortcutsService])
], KeyboardShortcutsComponent);
export { KeyboardShortcutsComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmcta2V5Ym9hcmQtc2hvcnRjdXRzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWtleWJvYXJkLXNob3J0Y3V0cy8iLCJzb3VyY2VzIjpbImxpYi9uZy1rZXlib2FyZC1zaG9ydGN1dHMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBRUgsU0FBUyxFQUNULEtBQUssRUFLUixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUkzRTs7O0dBR0c7QUFLSCxJQUFhLDBCQUEwQixHQUF2QyxNQUFhLDBCQUEwQjtJQWdDbkM7OztPQUdHO0lBQ0gsWUFBb0IsUUFBa0M7UUFBbEMsYUFBUSxHQUFSLFFBQVEsQ0FBMEI7UUFuQ3REOztXQUVHO1FBQ00sY0FBUyxHQUFvQyxFQUFFLENBQUM7UUFFekQ7Ozs7V0FJRztRQUNLLGFBQVEsR0FBYSxFQUFFLENBQUM7UUFFaEM7O1dBRUc7UUFDSyxjQUFTLEdBQUcsS0FBSyxDQUFDO0lBb0IrQixDQUFDO0lBbkIxRDs7T0FFRztJQUNNLElBQUksUUFBUSxDQUFDLEtBQUs7UUFDdkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDdkIsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3BDLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO1NBQ3RCO1FBQ0QsSUFBSSxLQUFLLEVBQUU7WUFDUCxPQUFPO1NBQ1Y7UUFDRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBUUQ7O09BRUc7SUFDSCxRQUFRLEtBQUksQ0FBQztJQUViOztPQUVHO0lBQ0ksTUFBTSxDQUFDLEdBQVc7UUFDckIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxlQUFlLEtBQVUsQ0FBQztJQUUxQjs7T0FFRztJQUNILFdBQVcsQ0FBQyxPQUFzQjtRQUM5QixJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFO1lBQ3ZELE9BQU87U0FDVjtRQUNELElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNmLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUN2QztRQUNELFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUN4RixDQUFDO0lBRUQ7O09BRUc7SUFDSCxXQUFXO1FBQ1AsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7Q0FDSixDQUFBO0FBdEVZO0lBQVIsS0FBSyxFQUFFOzs2REFBaUQ7QUFnQmhEO0lBQVIsS0FBSyxFQUFFOzs7MERBVVA7QUE5QlEsMEJBQTBCO0lBSnRDLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSx1QkFBdUI7UUFDakMsUUFBUSxFQUFFLEVBQUU7S0FDZixDQUFDOzZDQXFDZ0Msd0JBQXdCO0dBcEM3QywwQkFBMEIsQ0EwRXRDO1NBMUVZLDBCQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQWZ0ZXJWaWV3SW5pdCxcbiAgICBDb21wb25lbnQsXG4gICAgSW5wdXQsXG4gICAgT25DaGFuZ2VzLFxuICAgIE9uRGVzdHJveSxcbiAgICBPbkluaXQsXG4gICAgU2ltcGxlQ2hhbmdlc1xufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgS2V5Ym9hcmRTaG9ydGN1dHNTZXJ2aWNlIH0gZnJvbSBcIi4vbmcta2V5Ym9hcmQtc2hvcnRjdXRzLnNlcnZpY2VcIjtcbmltcG9ydCB7IFNob3J0Y3V0SW5wdXQsIFNob3J0Y3V0RXZlbnRPdXRwdXQgfSBmcm9tIFwiLi9uZy1rZXlib2FyZC1zaG9ydGN1dHMuaW50ZXJmYWNlc1wiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzXCI7XG5cbi8qKlxuICogQSBjb21wb25lbnQgdG8gYmluZCBnbG9iYWwgc2hvcnRjdXRzLCBjYW4gYmUgdXNlZCBtdWx0aXBsZSB0aW1lcyBhY3Jvc3MgdGhlIGFwcFxuICogd2lsbCByZW1vdmUgcmVnaXN0ZXJlZCBzaG9ydGN1dHMgd2hlbiBlbGVtZW50IGlzIHJlbW92ZWQgZnJvbSBET00uXG4gKi9cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiBcIm5nLWtleWJvYXJkLXNob3J0Y3V0c1wiLFxuICAgIHRlbXBsYXRlOiBcIlwiXG59KVxuZXhwb3J0IGNsYXNzIEtleWJvYXJkU2hvcnRjdXRzQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gICAgLyoqXG4gICAgICogQSBsaXN0IG9mIHNob3J0Y3V0cy5cbiAgICAgKi9cbiAgICBASW5wdXQoKSBzaG9ydGN1dHM6IFNob3J0Y3V0SW5wdXRbXSB8IFNob3J0Y3V0SW5wdXQgPSBbXTtcblxuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKiBsaXN0IG9mIHJlZ2lzdGVyZWQga2V5Ym9hcmQgc2hvcnRjdXRzXG4gICAgICogdXNlZCBmb3IgY2xlYW4gdXAgb24gTmdEZXN0cm95LlxuICAgICAqL1xuICAgIHByaXZhdGUgY2xlYXJJZHM6IHN0cmluZ1tdID0gW107XG5cbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgcHJpdmF0ZSBfZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBEaXNhYmxlIGFsbCBzaG9ydGN1dHMgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgICAqL1xuICAgIEBJbnB1dCgpIHNldCBkaXNhYmxlZCh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9kaXNhYmxlZCA9IHZhbHVlO1xuICAgICAgICBpZiAodGhpcy5jbGVhcklkcykge1xuICAgICAgICAgICAgdGhpcy5rZXlib2FyZC5yZW1vdmUodGhpcy5jbGVhcklkcyk7XG4gICAgICAgICAgICB0aGlzLmNsZWFySWRzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jbGVhcklkcyA9IHRoaXMua2V5Ym9hcmQuYWRkKHRoaXMuc2hvcnRjdXRzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICogQHBhcmFtIHtLZXlib2FyZFNob3J0Y3V0c1NlcnZpY2V9IGtleWJvYXJkXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBrZXlib2FyZDogS2V5Ym9hcmRTaG9ydGN1dHNTZXJ2aWNlKSB7fVxuXG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIG5nT25Jbml0KCkge31cblxuICAgIC8qKlxuICAgICAqIFNlbGVjdCBhIGtleSB0byBsaXN0ZW4gdG8sIHdpbGwgZW1pdCB3aGVuIHRoZSBzZWxlY3RlZCBrZXkgaXMgcHJlc3NlZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgc2VsZWN0KGtleTogc3RyaW5nKTogT2JzZXJ2YWJsZTxTaG9ydGN1dEV2ZW50T3V0cHV0PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmtleWJvYXJkLnNlbGVjdChrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7fVxuXG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICAgICAgaWYgKCFjaGFuZ2VzLnNob3J0Y3V0cyB8fCAhY2hhbmdlcy5zaG9ydGN1dHMuY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY2xlYXJJZHMpIHtcbiAgICAgICAgICAgIHRoaXMua2V5Ym9hcmQucmVtb3ZlKHRoaXMuY2xlYXJJZHMpO1xuICAgICAgICB9XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5jbGVhcklkcyA9IHRoaXMua2V5Ym9hcmQuYWRkKGNoYW5nZXMuc2hvcnRjdXRzLmN1cnJlbnRWYWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5rZXlib2FyZC5yZW1vdmUodGhpcy5jbGVhcklkcyk7XG4gICAgfVxufVxuIl19