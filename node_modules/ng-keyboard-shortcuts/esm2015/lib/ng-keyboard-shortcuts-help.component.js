import * as tslib_1 from "tslib";
import { ApplicationRef, Component, ComponentFactoryResolver, ElementRef, Injector, Input, TemplateRef, ViewChild, ViewContainerRef } from "@angular/core";
import { DomPortalOutlet } from "./dom-portal-outlet";
import { TemplatePortal } from "./portal";
import { KeyboardShortcutsService } from "./ng-keyboard-shortcuts.service";
import { KeyboardShortcutsHelpService } from "./ng-keyboard-shortcuts-help.service";
import { animate, style, transition, trigger } from "@angular/animations";
import { distinctUntilChanged } from "rxjs/operators";
import { groupBy } from "./utils";
import { map } from "rxjs/internal/operators";
/**
 * @ignore
 */
const scrollAbleKeys = new Map([[31, 1], [38, 1], [39, 1], [40, 1]]);
/**
 * @ignore
 */
const preventDefault = (ignore) => e => {
    const modal = e.target.closest(ignore);
    if (modal) {
        return;
    }
    e = e || window.event;
    if (e.preventDefault)
        e.preventDefault();
    e.returnValue = false;
};
const ɵ0 = preventDefault;
/**
 * @ignore
 */
const preventDefaultForScrollKeys = e => {
    if (!scrollAbleKeys.has(e.keyCode)) {
        return;
    }
    preventDefault(e);
    return false;
};
const ɵ1 = preventDefaultForScrollKeys;
/**
 * @ignore
 */
let scrollEvents = [{ name: 'wheel', callback: null }, { name: 'touchmove', callback: null }, { name: 'DOMMouseScroll', callback: null }];
/**
 * @ignore
 */
const disableScroll = (ignore) => {
    scrollEvents = scrollEvents.map(event => {
        const callback = preventDefault(ignore);
        window.addEventListener(event.name, callback, { passive: false });
        return Object.assign({}, event, { callback });
    });
    window.addEventListener('keydown', preventDefaultForScrollKeys);
};
const ɵ2 = disableScroll;
/**
 * @ignore
 */
const enableScroll = () => {
    scrollEvents = scrollEvents.map(event => {
        window.removeEventListener(event.name, event.callback);
        return Object.assign({}, event, { callback: null });
    });
    window.removeEventListener('keydown', preventDefaultForScrollKeys);
};
const ɵ3 = enableScroll;
/**
 * A Component to show all registered shortcut in the app
 * it is shown as a modal
 */
let KeyboardShortcutsHelpComponent = class KeyboardShortcutsHelpComponent {
    /**
     * @ignore
     */
    constructor(componentFactoryResolver, appRef, keyboard, element, keyboardHelp, viewContainer, injector) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.appRef = appRef;
        this.keyboard = keyboard;
        this.element = element;
        this.keyboardHelp = keyboardHelp;
        this.viewContainer = viewContainer;
        this.injector = injector;
        /**
         * Disable scrolling while modal is open
         */
        this.disableScrolling = true;
        this.className = 'help-modal';
        /**
         * The title of the help screen
         * @default: "Keyboard shortcuts"
         */
        this.title = "Keyboard shortcuts";
        /**
         * What message to show when no shortcuts are available on the page.
         * @default "No shortcuts available"
         */
        this.emptyMessage = "No shortcuts available";
        /**
         * @ignore
         */
        this.showing = false;
        this.bodyPortalHost = new DomPortalOutlet(document.body, this.componentFactoryResolver, this.appRef, this.injector);
    }
    /**
     * The shortcut to show/hide the help screen
     */
    set key(value) {
        this._key = value;
        if (!value) {
            return;
        }
        if (this.clearIds) {
            this.keyboard.remove(this.clearIds);
        }
        this.clearIds = this.keyboard.add({
            key: value,
            preventDefault: true,
            command: () => this.toggle()
        });
    }
    set closeKey(value) {
        this._closeKey = value;
        if (!value) {
            return;
        }
        if (this.closeKeyIds) {
            this.keyboard.remove(this.closeKeyIds);
        }
        this.closeKeyIds = this.keyboard.add({
            key: value,
            preventDefault: true,
            command: () => this.hide()
        });
    }
    /**
     * Reveal the help screen manually.
     */
    reveal() {
        this.hide();
        if (this.disableScrolling) {
            disableScroll(`.${this.className}`);
        }
        const portal = new TemplatePortal(this.template, this.viewContainer);
        this.bodyPortalHost.attach(portal);
        this.showing = true;
        return this;
    }
    /**
     * Check if help screen is visible.
     * @returns boolean
     */
    visible() {
        return this.bodyPortalHost.hasAttached();
    }
    /**
     * Hide the help screen manually.
     */
    hide() {
        if (this.disableScrolling) {
            enableScroll();
        }
        if (!this.bodyPortalHost.hasAttached()) {
            return this;
        }
        this.bodyPortalHost.detach();
        this.showing = false;
        return this;
    }
    /**
     * @ignore
     */
    ngOnDestroy() {
        this.hide();
        if (this.clearIds) {
            this.keyboard.remove(this.clearIds);
        }
        if (this.closeKeyIds) {
            this.keyboard.remove(this.closeKeyIds);
        }
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
        if (this.timeoutId) {
            clearTimeout(this.timeoutId);
        }
    }
    /**
     * Show/Hide the help screen manually.
     */
    toggle() {
        this.visible() ? this.hide() : this.reveal();
        return this;
    }
    /**
     * @ignore
     */
    ngOnInit() {
        this.subscription = this.keyboardHelp.shortcuts$
            .pipe(distinctUntilChanged(), map(shortcuts => groupBy(shortcuts, "label")))
            .subscribe(shortcuts => {
            this.shortcuts = shortcuts;
            this.labels = Object.keys(shortcuts);
        });
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], KeyboardShortcutsHelpComponent.prototype, "disableScrolling", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], KeyboardShortcutsHelpComponent.prototype, "key", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], KeyboardShortcutsHelpComponent.prototype, "closeKey", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], KeyboardShortcutsHelpComponent.prototype, "title", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], KeyboardShortcutsHelpComponent.prototype, "emptyMessage", void 0);
tslib_1.__decorate([
    ViewChild(TemplateRef, { static: false }),
    tslib_1.__metadata("design:type", TemplateRef)
], KeyboardShortcutsHelpComponent.prototype, "template", void 0);
KeyboardShortcutsHelpComponent = tslib_1.__decorate([
    Component({
        selector: "ng-keyboard-shortcuts-help",
        template: "<ng-template>\n    <div class=\"help-modal__container\">\n        <div class=\"{{className}}\" [@enterAnimation] *ngIf=\"showing\">\n            <div class=\"title\">\n                <h3 class=\"title__text\">{{title}}</h3>\n            </div>\n            <div class=\"help-modal__body\">\n                <span *ngIf=\"!labels.length\">\n                    {{emptyMessage}}\n                </span>\n                <div>\n                    <ul *ngFor=\"let label of labels\" class=\"help-modal__list\">\n                        <h4 class=\"item-group-label\">{{label}}</h4>\n                        <ng-keyboard-shortcuts-help-item\n                                *ngFor=\"let shortcut of shortcuts[label]; let i = index\"\n                                [shortcut]=\"shortcut\"\n                                [index]=\"i\"\n                        ></ng-keyboard-shortcuts-help-item>\n                    </ul>\n                </div>\n            </div>\n        </div>\n        <div class=\"help-modal__backdrop\" [@overlayAnimation] (click)=\"hide()\" *ngIf=\"showing\"></div>\n    </div>\n</ng-template>\n",
        animations: [
            trigger("enterAnimation", [
                transition(":enter", [
                    style({ transform: "translateX(-100%)", opacity: 0 }),
                    animate("0.33s cubic-bezier(0,0,0.3,1)", style({ transform: "translateX(0)", opacity: 1 }))
                ]),
                transition(":leave", [
                    style({ transform: "translateX(0)", opacity: 1 }),
                    animate("0.23s cubic-bezier(0,0,0.3,1)", style({ transform: "translateX(-100%)", opacity: 0 }))
                ])
            ]),
            trigger("overlayAnimation", [
                transition(":enter", [
                    style({ opacity: 0 }),
                    animate("1s cubic-bezier(0,0,0.3,1)", style({ opacity: 1 }))
                ]),
                transition(":leave", [
                    style({ opacity: 1 }),
                    animate("1s cubic-bezier(0,0,0.3,1)", style({ opacity: 0 }))
                ])
            ])
        ],
        styles: [".help-modal__container{position:fixed;top:0;right:0;z-index:10000;left:0;bottom:0;display:flex;align-items:center;justify-content:center}.help-modal{z-index:1000;min-width:420px;max-height:calc(100% - 100px);overflow:auto;padding:20px;box-shadow:0 11px 15px -7px rgba(0,0,0,.2),0 24px 38px 3px rgba(0,0,0,.14),0 9px 46px 8px rgba(0,0,0,.12);background:#fff}.item-group-label{text-transform:capitalize}.title{padding:20px 0}.title__text{margin:0;padding:0}.help-modal__list{padding:0}.help-modal__backdrop{position:absolute;background:rgba(0,0,0,.27);top:0;bottom:0;left:0;right:0;z-index:500;pointer-events:auto;-webkit-tap-highlight-color:transparent;opacity:1}"]
    }),
    tslib_1.__metadata("design:paramtypes", [ComponentFactoryResolver,
        ApplicationRef,
        KeyboardShortcutsService,
        ElementRef,
        KeyboardShortcutsHelpService,
        ViewContainerRef,
        Injector])
], KeyboardShortcutsHelpComponent);
export { KeyboardShortcutsHelpComponent };
export { ɵ0, ɵ1, ɵ2, ɵ3 };
//# sourceMappingURL=data:application/json;base64,