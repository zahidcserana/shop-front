const isMac = (navigator.userAgent.indexOf('Mac OS') !== -1);
export const modifiers = {
    'shift': 'shiftKey',
    'ctrl': 'ctrlKey',
    'alt': 'altKey',
    'cmd': isMac ? 'metaKey' : 'ctrlKey',
    'command': isMac ? 'metaKey' : 'ctrlKey',
    'meta': isMac ? 'metaKey' : 'ctrlKey',
    'left command': 'metaKey',
    'right command': 'MetaRight',
    '⌘': isMac ? 'metaKey' : 'ctrlKey',
    'option': 'altKey',
    'ctl': 'ctrlKey',
    'control': 'ctrlKey',
};
export const symbols = {
    'cmd': isMac ? '⌘' : 'Ctrl',
    'command': isMac ? '⌘' : 'Ctrl',
    'left command': isMac ? '⌘' : 'Ctrl',
    'right command': isMac ? '⌘' : 'Ctrl',
    'option': isMac ? '⌥' : 'Alt',
    'left': '←',
    'right': '→',
    'up': '↑',
    'down': '↓',
    'alt': isMac ? '⌥' : 'Alt',
    'ctrl': 'Ctrl',
    'control': 'Ctrl',
    'shift': '⇧'
};
export const _MAP = {
    8: 'backspace',
    9: 'tab',
    13: 'enter',
    16: 'shift',
    17: ['ctrl', 'control'],
    18: 'alt',
    20: 'capslock',
    27: ['esc', 'escape'],
    32: ['space', 'spc'],
    33: 'pageup',
    34: 'pagedown',
    35: 'end',
    36: 'home',
    37: 'left',
    38: 'up',
    39: 'right',
    40: 'down',
    45: 'ins',
    46: 'del',
    91: ['meta', 'cmd', 'command'],
    93: ['meta', 'cmd', 'command'],
    224: ['meta', 'cmd', 'command']
};
/**
 * mapping for special characters so they can support
 *
 * this dictionary is only used incase you want to bind a
 * keyup or keydown event to one of these keys
 *
 * @type
 */
export const _KEYCODE_MAP = {
    106: '*',
    107: '+',
    109: '-',
    110: '.',
    111: '/',
    186: ';',
    187: '=',
    188: ',',
    189: '-',
    190: '.',
    191: '/',
    192: '`',
    219: '[',
    220: '\\',
    221: ']',
    222: '\''
};
/**
 * this is a mapping of keys that require shift on a US keypad
 * back to the non shift equivelents
 *
 * this is so you can use keyup events with these keys
 *
 * note that this will only work reliably on US keyboards
 *
 */
export const _SHIFT_MAP = {
    '`': '~',
    '1': '!',
    '2': '@',
    '3': '#',
    '4': '$',
    '5': '%',
    '6': '^',
    '7': '&',
    '8': '*',
    '9': '(',
    '0': ')',
    '-': '_',
    '=': '+',
    ';': ':',
    '\'': '\"',
    ',': '<',
    '.': '>',
    '/': '?',
    '\\': '|'
};
/**
 * loop through the f keys, f1 to f19 and add them to the map
 * programatically
 */
for (let i = 1; i < 20; ++i) {
    _MAP[111 + i] = 'f' + i;
}
/**
 * loop through to map numbers on the numeric keypad
 */
for (let i = 0; i <= 9; ++i) {
    // This needs to use a string cause otherwise since 0 is falsey
    // event will never fire for numpad 0 pressed as part of a keydown
    // event.
    _MAP[i + 96] = i.toString();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5cy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWtleWJvYXJkLXNob3J0Y3V0cy8iLCJzb3VyY2VzIjpbImxpYi9rZXlzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sS0FBSyxHQUFHLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUU3RCxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUc7SUFDckIsT0FBTyxFQUFFLFVBQVU7SUFDbkIsTUFBTSxFQUFFLFNBQVM7SUFDakIsS0FBSyxFQUFFLFFBQVE7SUFDZixLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVM7SUFDcEMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTO0lBQ3hDLE1BQU0sRUFBRSxLQUFLLENBQUEsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUztJQUNwQyxjQUFjLEVBQUUsU0FBUztJQUN6QixlQUFlLEVBQUUsV0FBVztJQUM1QixHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVM7SUFDbEMsUUFBUSxFQUFFLFFBQVE7SUFDbEIsS0FBSyxFQUFFLFNBQVM7SUFDaEIsU0FBUyxFQUFFLFNBQVM7Q0FDdkIsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRztJQUNuQixLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU07SUFDM0IsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNO0lBQy9CLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTTtJQUNwQyxlQUFlLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU07SUFDckMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLO0lBQzdCLE1BQU0sRUFBRSxHQUFHO0lBQ1gsT0FBTyxFQUFFLEdBQUc7SUFDWixJQUFJLEVBQUUsR0FBRztJQUNULE1BQU0sRUFBRSxHQUFHO0lBQ1gsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLO0lBQzFCLE1BQU0sRUFBRSxNQUFNO0lBQ2QsU0FBUyxFQUFFLE1BQU07SUFDakIsT0FBTyxFQUFFLEdBQUc7Q0FDZixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHO0lBQ2hCLENBQUMsRUFBRSxXQUFXO0lBQ2QsQ0FBQyxFQUFFLEtBQUs7SUFDUixFQUFFLEVBQUUsT0FBTztJQUNYLEVBQUUsRUFBRSxPQUFPO0lBQ1gsRUFBRSxFQUFFLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQztJQUN2QixFQUFFLEVBQUUsS0FBSztJQUNULEVBQUUsRUFBRSxVQUFVO0lBQ2QsRUFBRSxFQUFFLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQztJQUNyQixFQUFFLEVBQUUsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDO0lBQ3BCLEVBQUUsRUFBRSxRQUFRO0lBQ1osRUFBRSxFQUFFLFVBQVU7SUFDZCxFQUFFLEVBQUUsS0FBSztJQUNULEVBQUUsRUFBRSxNQUFNO0lBQ1YsRUFBRSxFQUFFLE1BQU07SUFDVixFQUFFLEVBQUUsSUFBSTtJQUNSLEVBQUUsRUFBRSxPQUFPO0lBQ1gsRUFBRSxFQUFFLE1BQU07SUFDVixFQUFFLEVBQUUsS0FBSztJQUNULEVBQUUsRUFBRSxLQUFLO0lBQ1QsRUFBRSxFQUFFLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUM7SUFDOUIsRUFBRSxFQUFFLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUM7SUFDOUIsR0FBRyxFQUFFLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUM7Q0FDbEMsQ0FBQztBQUdGOzs7Ozs7O0dBT0c7QUFDSCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUc7SUFDeEIsR0FBRyxFQUFFLEdBQUc7SUFDUixHQUFHLEVBQUUsR0FBRztJQUNSLEdBQUcsRUFBRSxHQUFHO0lBQ1IsR0FBRyxFQUFFLEdBQUc7SUFDUixHQUFHLEVBQUcsR0FBRztJQUNULEdBQUcsRUFBRSxHQUFHO0lBQ1IsR0FBRyxFQUFFLEdBQUc7SUFDUixHQUFHLEVBQUUsR0FBRztJQUNSLEdBQUcsRUFBRSxHQUFHO0lBQ1IsR0FBRyxFQUFFLEdBQUc7SUFDUixHQUFHLEVBQUUsR0FBRztJQUNSLEdBQUcsRUFBRSxHQUFHO0lBQ1IsR0FBRyxFQUFFLEdBQUc7SUFDUixHQUFHLEVBQUUsSUFBSTtJQUNULEdBQUcsRUFBRSxHQUFHO0lBQ1IsR0FBRyxFQUFFLElBQUk7Q0FDWixDQUFDO0FBRUY7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUc7SUFDdEIsR0FBRyxFQUFFLEdBQUc7SUFDUixHQUFHLEVBQUUsR0FBRztJQUNSLEdBQUcsRUFBRSxHQUFHO0lBQ1IsR0FBRyxFQUFFLEdBQUc7SUFDUixHQUFHLEVBQUUsR0FBRztJQUNSLEdBQUcsRUFBRSxHQUFHO0lBQ1IsR0FBRyxFQUFFLEdBQUc7SUFDUixHQUFHLEVBQUUsR0FBRztJQUNSLEdBQUcsRUFBRSxHQUFHO0lBQ1IsR0FBRyxFQUFFLEdBQUc7SUFDUixHQUFHLEVBQUUsR0FBRztJQUNSLEdBQUcsRUFBRSxHQUFHO0lBQ1IsR0FBRyxFQUFFLEdBQUc7SUFDUixHQUFHLEVBQUUsR0FBRztJQUNSLElBQUksRUFBRSxJQUFJO0lBQ1YsR0FBRyxFQUFFLEdBQUc7SUFDUixHQUFHLEVBQUUsR0FBRztJQUNSLEdBQUcsRUFBRSxHQUFHO0lBQ1IsSUFBSSxFQUFFLEdBQUc7Q0FDWixDQUFDO0FBRUY7OztHQUdHO0FBQ0gsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRTtJQUN6QixJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7Q0FDM0I7QUFFRDs7R0FFRztBQUNILEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7SUFFekIsK0RBQStEO0lBQy9ELGtFQUFrRTtJQUNsRSxTQUFTO0lBQ1QsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7Q0FDL0IiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBpc01hYyA9IChuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ01hYyBPUycpICE9PSAtMSk7XG5cbmV4cG9ydCBjb25zdCBtb2RpZmllcnMgPSB7XG4gICAgJ3NoaWZ0JzogJ3NoaWZ0S2V5JyxcbiAgICAnY3RybCc6ICdjdHJsS2V5JyxcbiAgICAnYWx0JzogJ2FsdEtleScsXG4gICAgJ2NtZCc6IGlzTWFjID8gJ21ldGFLZXknIDogJ2N0cmxLZXknLFxuICAgICdjb21tYW5kJzogaXNNYWMgPyAnbWV0YUtleScgOiAnY3RybEtleScsXG4gICAgJ21ldGEnOiBpc01hYz8gJ21ldGFLZXknIDogJ2N0cmxLZXknLFxuICAgICdsZWZ0IGNvbW1hbmQnOiAnbWV0YUtleScsXG4gICAgJ3JpZ2h0IGNvbW1hbmQnOiAnTWV0YVJpZ2h0JyxcbiAgICAn4oyYJzogaXNNYWMgPyAnbWV0YUtleScgOiAnY3RybEtleScsXG4gICAgJ29wdGlvbic6ICdhbHRLZXknLFxuICAgICdjdGwnOiAnY3RybEtleScsXG4gICAgJ2NvbnRyb2wnOiAnY3RybEtleScsXG59O1xuXG5leHBvcnQgY29uc3Qgc3ltYm9scyA9IHtcbiAgICAnY21kJzogaXNNYWMgPyAn4oyYJyA6ICdDdHJsJyxcbiAgICAnY29tbWFuZCc6IGlzTWFjID8gJ+KMmCcgOiAnQ3RybCcsXG4gICAgJ2xlZnQgY29tbWFuZCc6IGlzTWFjID8gJ+KMmCcgOiAnQ3RybCcsXG4gICAgJ3JpZ2h0IGNvbW1hbmQnOiBpc01hYyA/ICfijJgnIDogJ0N0cmwnLFxuICAgICdvcHRpb24nOiBpc01hYyA/ICfijKUnIDogJ0FsdCcsXG4gICAgJ2xlZnQnOiAn4oaQJyxcbiAgICAncmlnaHQnOiAn4oaSJyxcbiAgICAndXAnOiAn4oaRJyxcbiAgICAnZG93bic6ICfihpMnLFxuICAgICdhbHQnOiBpc01hYyA/ICfijKUnIDogJ0FsdCcsXG4gICAgJ2N0cmwnOiAnQ3RybCcsXG4gICAgJ2NvbnRyb2wnOiAnQ3RybCcsXG4gICAgJ3NoaWZ0JzogJ+KHpydcbn07XG5cbmV4cG9ydCBjb25zdCBfTUFQID0ge1xuICAgIDg6ICdiYWNrc3BhY2UnLFxuICAgIDk6ICd0YWInLFxuICAgIDEzOiAnZW50ZXInLFxuICAgIDE2OiAnc2hpZnQnLFxuICAgIDE3OiBbJ2N0cmwnLCAnY29udHJvbCddLFxuICAgIDE4OiAnYWx0JyxcbiAgICAyMDogJ2NhcHNsb2NrJyxcbiAgICAyNzogWydlc2MnLCAnZXNjYXBlJ10sXG4gICAgMzI6IFsnc3BhY2UnLCAnc3BjJ10sXG4gICAgMzM6ICdwYWdldXAnLFxuICAgIDM0OiAncGFnZWRvd24nLFxuICAgIDM1OiAnZW5kJyxcbiAgICAzNjogJ2hvbWUnLFxuICAgIDM3OiAnbGVmdCcsXG4gICAgMzg6ICd1cCcsXG4gICAgMzk6ICdyaWdodCcsXG4gICAgNDA6ICdkb3duJyxcbiAgICA0NTogJ2lucycsXG4gICAgNDY6ICdkZWwnLFxuICAgIDkxOiBbJ21ldGEnLCAnY21kJywgJ2NvbW1hbmQnXSxcbiAgICA5MzogWydtZXRhJywgJ2NtZCcsICdjb21tYW5kJ10sXG4gICAgMjI0OiBbJ21ldGEnLCAnY21kJywgJ2NvbW1hbmQnXVxufTtcblxuXG4vKipcbiAqIG1hcHBpbmcgZm9yIHNwZWNpYWwgY2hhcmFjdGVycyBzbyB0aGV5IGNhbiBzdXBwb3J0XG4gKlxuICogdGhpcyBkaWN0aW9uYXJ5IGlzIG9ubHkgdXNlZCBpbmNhc2UgeW91IHdhbnQgdG8gYmluZCBhXG4gKiBrZXl1cCBvciBrZXlkb3duIGV2ZW50IHRvIG9uZSBvZiB0aGVzZSBrZXlzXG4gKlxuICogQHR5cGVcbiAqL1xuZXhwb3J0IGNvbnN0IF9LRVlDT0RFX01BUCA9IHtcbiAgICAxMDY6ICcqJyxcbiAgICAxMDc6ICcrJyxcbiAgICAxMDk6ICctJyxcbiAgICAxMTA6ICcuJyxcbiAgICAxMTEgOiAnLycsXG4gICAgMTg2OiAnOycsXG4gICAgMTg3OiAnPScsXG4gICAgMTg4OiAnLCcsXG4gICAgMTg5OiAnLScsXG4gICAgMTkwOiAnLicsXG4gICAgMTkxOiAnLycsXG4gICAgMTkyOiAnYCcsXG4gICAgMjE5OiAnWycsXG4gICAgMjIwOiAnXFxcXCcsXG4gICAgMjIxOiAnXScsXG4gICAgMjIyOiAnXFwnJ1xufTtcblxuLyoqXG4gKiB0aGlzIGlzIGEgbWFwcGluZyBvZiBrZXlzIHRoYXQgcmVxdWlyZSBzaGlmdCBvbiBhIFVTIGtleXBhZFxuICogYmFjayB0byB0aGUgbm9uIHNoaWZ0IGVxdWl2ZWxlbnRzXG4gKlxuICogdGhpcyBpcyBzbyB5b3UgY2FuIHVzZSBrZXl1cCBldmVudHMgd2l0aCB0aGVzZSBrZXlzXG4gKlxuICogbm90ZSB0aGF0IHRoaXMgd2lsbCBvbmx5IHdvcmsgcmVsaWFibHkgb24gVVMga2V5Ym9hcmRzXG4gKlxuICovXG5leHBvcnQgY29uc3QgX1NISUZUX01BUCA9IHtcbiAgICAnYCc6ICd+JyxcbiAgICAnMSc6ICchJyxcbiAgICAnMic6ICdAJyxcbiAgICAnMyc6ICcjJyxcbiAgICAnNCc6ICckJyxcbiAgICAnNSc6ICclJyxcbiAgICAnNic6ICdeJyxcbiAgICAnNyc6ICcmJyxcbiAgICAnOCc6ICcqJyxcbiAgICAnOSc6ICcoJyxcbiAgICAnMCc6ICcpJyxcbiAgICAnLSc6ICdfJyxcbiAgICAnPSc6ICcrJyxcbiAgICAnOyc6ICc6JyxcbiAgICAnXFwnJzogJ1xcXCInLFxuICAgICcsJzogJzwnLFxuICAgICcuJzogJz4nLFxuICAgICcvJzogJz8nLFxuICAgICdcXFxcJzogJ3wnXG59O1xuXG4vKipcbiAqIGxvb3AgdGhyb3VnaCB0aGUgZiBrZXlzLCBmMSB0byBmMTkgYW5kIGFkZCB0aGVtIHRvIHRoZSBtYXBcbiAqIHByb2dyYW1hdGljYWxseVxuICovXG5mb3IgKGxldCBpID0gMTsgaSA8IDIwOyArK2kpIHtcbiAgICBfTUFQWzExMSArIGldID0gJ2YnICsgaTtcbn1cblxuLyoqXG4gKiBsb29wIHRocm91Z2ggdG8gbWFwIG51bWJlcnMgb24gdGhlIG51bWVyaWMga2V5cGFkXG4gKi9cbmZvciAobGV0IGkgPSAwOyBpIDw9IDk7ICsraSkge1xuXG4gICAgLy8gVGhpcyBuZWVkcyB0byB1c2UgYSBzdHJpbmcgY2F1c2Ugb3RoZXJ3aXNlIHNpbmNlIDAgaXMgZmFsc2V5XG4gICAgLy8gZXZlbnQgd2lsbCBuZXZlciBmaXJlIGZvciBudW1wYWQgMCBwcmVzc2VkIGFzIHBhcnQgb2YgYSBrZXlkb3duXG4gICAgLy8gZXZlbnQuXG4gICAgX01BUFtpICsgOTZdID0gaS50b1N0cmluZygpO1xufSJdfQ==