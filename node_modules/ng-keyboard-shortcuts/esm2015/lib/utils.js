export function isFunction(x) {
    return typeof x === "function";
}
export const any = (fn, list) => {
    let idx = 0;
    while (idx < list.length) {
        if (fn(list[idx])) {
            return true;
        }
        idx += 1;
    }
    return false;
};
export const identity = x => x;
/**
 * @ignore
 * @param x
 * @returns boolean
 */
export const isNill = x => x == null;
/**
 * @ignore
 * @param xs
 * @param key
 * @returns any
 */
export const groupBy = (xs, key) => xs.reduce((result, x) => (Object.assign({}, result, { [x[key]]: [...(result[x[key]] || []), x] })), {});
/**
 * @ignore
 * @param first
 * @param second
 * @returns any[]
 */
export const difference = (first, second) => first.filter(item => !second.includes(item));
/**
 * @ignore
 * @param preds
 * @returns (...args) => boolean;
 */
export const allPass = preds => (...args) => {
    let idx = 0;
    const len = preds.length;
    while (idx < len) {
        if (!preds[idx].apply(this, args)) {
            return false;
        }
        idx += 1;
    }
    return true;
};
export const prop = prop => object => object[prop];
const minMaxArrayProp = type => (property, array) => Math[type].apply(Math, array.map(prop(property)));
const ɵ0 = minMaxArrayProp;
export const maxArrayProp = (property, array) => {
    return array.reduce((acc, curr) => {
        const propFn = prop(property);
        const currentValue = propFn(curr);
        const previousValue = propFn(acc);
        return currentValue > previousValue ? curr : acc;
    }, { [property]: 0 });
};
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1rZXlib2FyZC1zaG9ydGN1dHMvIiwic291cmNlcyI6WyJsaWIvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxVQUFVLFVBQVUsQ0FBQyxDQUFNO0lBQzdCLE9BQU8sT0FBTyxDQUFDLEtBQUssVUFBVSxDQUFDO0FBQ25DLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxFQUFZLEVBQUUsSUFBVyxFQUFFLEVBQUU7SUFDN0MsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQ1osT0FBTyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUN0QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtZQUNmLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFDRCxHQUFHLElBQUksQ0FBQyxDQUFDO0tBQ1o7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNqQixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFFL0I7Ozs7R0FJRztBQUNILE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7QUFFckM7Ozs7O0dBS0c7QUFDSCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FDL0IsRUFBRSxDQUFDLE1BQU0sQ0FDTCxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLG1CQUNSLE1BQU0sSUFDVCxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsSUFDMUMsRUFDRixFQUFFLENBQ0wsQ0FBQztBQUVOOzs7OztHQUtHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsS0FBWSxFQUFFLE1BQWEsRUFBRSxFQUFFLENBQ3RELEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUVqRDs7OztHQUlHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksRUFBRSxFQUFFO0lBQ3hDLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztJQUNaLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7SUFDekIsT0FBTyxHQUFHLEdBQUcsR0FBRyxFQUFFO1FBQ2QsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFO1lBQy9CLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBQ0QsR0FBRyxJQUFJLENBQUMsQ0FBQztLQUNaO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDaEIsQ0FBQyxDQUFDO0FBQ0YsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7QUFFbkQsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUNoRCxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7O0FBRXRELE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsRUFBRTtJQUM1QyxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQ2YsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUU7UUFDVixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDOUIsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQyxPQUFPLFlBQVksR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO0lBQ3JELENBQUMsRUFDRCxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQ3BCLENBQUM7QUFDTixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbih4OiBhbnkpOiB4IGlzIEZ1bmN0aW9uIHtcbiAgICByZXR1cm4gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIjtcbn1cblxuZXhwb3J0IGNvbnN0IGFueSA9IChmbjogRnVuY3Rpb24sIGxpc3Q6IGFueVtdKSA9PiB7XG4gICAgbGV0IGlkeCA9IDA7XG4gICAgd2hpbGUgKGlkeCA8IGxpc3QubGVuZ3RoKSB7XG4gICAgICAgIGlmIChmbihsaXN0W2lkeF0pKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZHggKz0gMTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuZXhwb3J0IGNvbnN0IGlkZW50aXR5ID0geCA9PiB4O1xuXG4vKipcbiAqIEBpZ25vcmVcbiAqIEBwYXJhbSB4XG4gKiBAcmV0dXJucyBib29sZWFuXG4gKi9cbmV4cG9ydCBjb25zdCBpc05pbGwgPSB4ID0+IHggPT0gbnVsbDtcblxuLyoqXG4gKiBAaWdub3JlXG4gKiBAcGFyYW0geHNcbiAqIEBwYXJhbSBrZXlcbiAqIEByZXR1cm5zIGFueVxuICovXG5leHBvcnQgY29uc3QgZ3JvdXBCeSA9ICh4cywga2V5KSA9PlxuICAgIHhzLnJlZHVjZShcbiAgICAgICAgKHJlc3VsdCwgeCkgPT4gKHtcbiAgICAgICAgICAgIC4uLnJlc3VsdCxcbiAgICAgICAgICAgIFt4W2tleV1dOiBbLi4uKHJlc3VsdFt4W2tleV1dIHx8IFtdKSwgeF1cbiAgICAgICAgfSksXG4gICAgICAgIHt9XG4gICAgKTtcblxuLyoqXG4gKiBAaWdub3JlXG4gKiBAcGFyYW0gZmlyc3RcbiAqIEBwYXJhbSBzZWNvbmRcbiAqIEByZXR1cm5zIGFueVtdXG4gKi9cbmV4cG9ydCBjb25zdCBkaWZmZXJlbmNlID0gKGZpcnN0OiBhbnlbXSwgc2Vjb25kOiBhbnlbXSkgPT5cbiAgICBmaXJzdC5maWx0ZXIoaXRlbSA9PiAhc2Vjb25kLmluY2x1ZGVzKGl0ZW0pKTtcblxuLyoqXG4gKiBAaWdub3JlXG4gKiBAcGFyYW0gcHJlZHNcbiAqIEByZXR1cm5zICguLi5hcmdzKSA9PiBib29sZWFuO1xuICovXG5leHBvcnQgY29uc3QgYWxsUGFzcyA9IHByZWRzID0+ICguLi5hcmdzKSA9PiB7XG4gICAgbGV0IGlkeCA9IDA7XG4gICAgY29uc3QgbGVuID0gcHJlZHMubGVuZ3RoO1xuICAgIHdoaWxlIChpZHggPCBsZW4pIHtcbiAgICAgICAgaWYgKCFwcmVkc1tpZHhdLmFwcGx5KHRoaXMsIGFyZ3MpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWR4ICs9IDE7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufTtcbmV4cG9ydCBjb25zdCBwcm9wID0gcHJvcCA9PiBvYmplY3QgPT4gb2JqZWN0W3Byb3BdO1xuXG5jb25zdCBtaW5NYXhBcnJheVByb3AgPSB0eXBlID0+IChwcm9wZXJ0eSwgYXJyYXkpID0+XG4gICAgTWF0aFt0eXBlXS5hcHBseShNYXRoLCBhcnJheS5tYXAocHJvcChwcm9wZXJ0eSkpKTtcblxuZXhwb3J0IGNvbnN0IG1heEFycmF5UHJvcCA9IChwcm9wZXJ0eSwgYXJyYXkpID0+IHtcbiAgICByZXR1cm4gYXJyYXkucmVkdWNlKFxuICAgICAgICAoYWNjLCBjdXJyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwcm9wRm4gPSBwcm9wKHByb3BlcnR5KTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IHByb3BGbihjdXJyKTtcbiAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzVmFsdWUgPSBwcm9wRm4oYWNjKTtcbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50VmFsdWUgPiBwcmV2aW91c1ZhbHVlID8gY3VyciA6IGFjYztcbiAgICAgICAgfSxcbiAgICAgICAgeyBbcHJvcGVydHldOiAwIH1cbiAgICApO1xufTsiXX0=